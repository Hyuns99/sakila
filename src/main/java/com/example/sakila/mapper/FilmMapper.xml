<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.sakila.mapper.FilmMapper">
	<!-- post방식 /on/modelfyFilm 수정 -->
	<update id="updateFilm" parameterType="com.example.sakila.vo.Film">
	    UPDATE film
	    <set>
	        <if test="title != null">
	            title = #{title},
	        </if>
	        <if test="description != null">
	            description = #{description},
	        </if>
	        <if test="releaseYear != null">
	            release_year = #{releaseYear},
	        </if>
	        <if test="languageId != null">
	            language_id = #{languageId},
	        </if>
	        <if test="originalLanguageId != null">
	            original_language_id = #{originalLanguageId},
	        </if>
	        <if test="rentalDuration != null">
	            rental_duration = #{rentalDuration},
	        </if>
	        <if test="rentalRate != null">
	            rental_rate = #{rentalRate},
	        </if>
	        <if test="length != null">
	            length = #{length},
	        </if>
	        <if test="replacementCost != null">
	            replacement_cost = #{replacementCost},
	        </if>
	        <if test="rating != null">
	            rating = #{rating},
	        </if>
	        <if test="specialFeatures != null">
	            special_features = #{specialFeatures}
	        </if>
	    </set>
	    WHERE film_id = #{filmId}
	</update>

	<!-- 삭제 -->
	<delete id="deleteFilmByKey" parameterType="Integer">
		DELETE FROM film
		WHERE film_id = #{filmId}
	</delete>

	<!-- 페이지네이션 -->
	<select id="selectFilmCount" resultType="int">
		SELECT COUNT(*)
		FROM film
	</select>

	<!--  filmList(categoryId가 null이나 0아닐 때)  -->
	<select id="selectFilmListByCategory" parameterType="Map" resultType="Map" >
	    SELECT 
	        f.film_id AS filmId,
	        f.title AS title,
	        f.release_year AS releaseYear,
	        f.rental_duration AS rentalDuration,
	        f.rental_rate AS rentalRate,
	        f.length AS length,
	        f.replacement_cost AS replacementCost,
	        f.rating AS rating,
	        fc.category_id AS categoryId
	    FROM film f
	    INNER JOIN film_category fc ON f.film_id = fc.film_id
	    WHERE fc.category_id = #{categoryId}
	    ORDER BY f.film_id DESC
	    LIMIT #{beginRow}, #{rowPerPage}
	</select>
	
	<!--  filmList(categoryId가 null이나 0일 때)  -->
	<select id="selectFilmList" parameterType="Map" resultType="Map">
		SELECT
			film_id filmId
			, title
			, release_year releaseYear
			, rental_duration rentalDuration
			, rental_rate rentalRate
			, length
			, replacement_cost replacementCost
			, rating 
			
		FROM film
		ORDER BY film_id DESC
		LIMIT #{beginRow}, #{rowPerPage}
	</select>

	<!-- actorOne에서 필름을 검색할 시 -->
	<select id="selectFilmListByTitle" parameterType="String" resultType="com.example.sakila.vo.Film">
		SELECT 
			film_id filmId
			, title
		FROM film
		WHERE title LIKE CONCAT('%',#{searchTitle},'%')
	</select>
	
	<!-- 영화 생성 -->
	<insert id="insertFilm" parameterType="com.example.sakila.vo.Film">
		INSERT INTO film(
			title
			, description
			, release_year
			, language_id
			, original_language_id
			, rental_duration
			, rental_rate
			, length
			, replacement_cost
			, rating
			, special_features
		) VALUES (
			#{title}
			, #{description}
			, #{releaseYear}
			, #{languageId}
			, #{originalLanguageId}
			, #{rentalDuration}
			, #{rentalRate}
			, #{length}
			, #{replacementCost}
			, #{rating}
			, #{specialFeatures}
		)
	</insert>

	<!-- get : /on/modifyFilm -->
	<!-- get : /on/filmOne -->
	<!-- 영화 상세보기 -->
	<select id="selectFilmOne" parameterType="int" resultType="Map">
		SELECT 
			fi.film_id filmId
			, fi.title title
			, fi.description description
			, fi.release_year releaseYear
			, fi.rental_duration rentalDuration
			, fi.rental_rate rentalRate
			, fi.length length
			, fi.replacement_cost replacementCost
			, fi.rating rating
			, fi.special_features specialFeatures
			, fi.last_update lastUpdate
			, fi.original_language_id originalLanguageId
			, la.name language
		FROM film fi INNER JOIN language la
		ON fi.language_id = la.language_id
		WHERE fi.film_id = #{filmId}
		
	</select>
	
	<!-- actorOne에서 보이는 filmList -->
	<select id="selectFilmTitleListByActor" parameterType="int" resultType="com.example.sakila.vo.Film">
		SELECT 
			f.film_id filmId
			, f.title title
		FROM film_actor fa INNER JOIN film f
		ON fa.film_id = f.film_id
		WHERE fa.actor_id = #{actorId}
	</select>
</mapper>